{% comment %} string filters {% endcomment %}
{% assign string = 'hello world' | upcase %}
<p>string is in uppercase:{{ string }}</p>
{% assign string = 'Hello world' | downcase %}
<p>string is in lowercase:{{ string }}</p>
{% assign string = 'this is a captilalize string.' | capitalize %}
<p>the capitalize string is:{{ string }}</p>
{% comment %} append filter is using for appending more text {% endcomment %}
{% assign string = 'this is a string.' %}
{{ string | append: 'appended text using filter append.' }}
{% assign string1 = 'This is STRING1.' %}
{% assign string2forAppending = 'This is a STRING for appending.' %}
<p>String Appenditiion:{{ string1 | downcase | append: string2forAppending | downcase }}</p>
{% comment %} strip filter will remove white spaces {% endcomment %}
{% assign strip_var = 'this is an strip value having extra empty spaces    ' %}
{{ strip_var | append: '!' }}
<br>
{{ strip_var | strip | append: '!' }}
{% comment %} strip_html filter is used to remove html elements and give us only plain text {% endcomment %}

{% assign htmltag = "<p style='color:red'>Hello world!</p>" %}
{{ htmltag | strip_html }}
{% comment %} tructuate {% endcomment %}
{% assign longstrinig = 'This is a very long string that will be trunctuated...' %}
<p>
  {{ longstrinig | truncate: 20 }}
</p>
<p>
  {{ longstrinig | truncate: 20, '?' }}
</p>
{% comment %} if i want first some words then i will use truncatewords {% endcomment %}
<p>
  {{ longstrinig | truncatewords: 4 }}
</p>
{% comment %}
  if we assigned html in variables and truncate characters then it will also count
  html tags in truncating letters so for avoid that case we will use strip_html and then use
  trunctate:35
{% endcomment %}
{% assign html_content = "<p style='color:orange'>This is html content and this is again html content</p>" %}
{{ html_content | strip_html | truncate: 20 }}

{% assign multilinefilter = '
    this is line1
    this is line2
    this is line3' %}
{% comment %}
  if we print above without new line newline_to_br filter then it will print all values
  in one as these are as written so in that case we will use newline_to_br filter
{% endcomment %}
{{ multilinefilter | newline_to_br }}

{% comment %} string replace replace a string with specified word {% endcomment %}
{% assign str = 'This is a string This is a string.' %}
<p>
  {{ str | replace: 'string', 'text' }}
</p>
<p>
  {{ str | replace_first: 'string', 'text' }}
</p>
<p>
  {{ str | replace_last: 'string', 'text' }}
</p>
{% assign my_string = 'Hello0, hello, hello world!' %}
<p>
  {{ my_string | remove: 'hello' }}
</p>
{% assign my_string = 'Hello0, hello1, hello2 world!' %}
<p>
  {{ my_string | remove_first: 'hello' -}}
</p>
{%- assign my_string = 'Hello0, hello1, hello2 world!' %}
<p>
  {{ my_string | remove_last: 'hello' }}
</p>

{% comment %}
  we can't create arrays but using split "," we can create a string and replace with comma
  that will behave as an array, let's we have a string
{% endcomment %}
{% assign str = '1,2,3,4' %}
<p>it's simple string.{{ str }}</p>
{% for string in str %}
  <p>
    {{ string }}
  </p>
  {% comment %} we will get a  simple string {% endcomment %}
{% endfor %}
{% assign str = '1,2,3,4' | split: ',' %}
{% for string in str %}
  <p>
    {{ string }}
  </p>
  {% comment %} we will get values like an array {% endcomment %}
{% endfor %}
{% comment %}  {% endcomment %}
{% assign myarray = 'html|orange, css|blue, javascript|yellow' | split: ',' %}
{% for language in myarray %}
  {% assign languageName = language | split: '|' | first %}
  {% assign languageColor = language | split: '|' | last %}
  <p style="color:{{ languageColor }}">
    {{ languageName }}
  </p>
{% endfor %}
